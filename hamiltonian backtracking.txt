#include <iostream>
#include <algorithm>
using namespace std;
#define v 5

int valid_permutation(int graph[v][v], int p[v], int pos) {
    for (int i = 0; i < pos; ++i) {
        if (p[i] == p[pos])
            return 0;
    }
    if (pos == 0 || graph[p[pos - 1]][p[pos]] == 1)
        return 1;
    return 0;
}

void find_graph(int graph[v][v], int p[v], int pos) {
    if (pos == v) {
        if (graph[p[pos - 1]][p[0]] == 1) {
            for (int i = 0; i < v; i++) {
                cout << p[i] << " ";
            }
            cout << endl;
        }
        return;
    }

    for (int i = 0; i < v; i++) {
        p[pos] = i;
        if (valid_permutation(graph, p, pos)) {
            find_graph(graph, p, pos + 1);
        }
        p[pos] = 0; // backtrack
    }
}

int main() {
    /* Let us create the following graph 
        (0)--(1)--(2) 
        |     / \   | 
        |    /      \  | 
        | /      \ | 
        (3)-------(4) */
    int graph[v][v] = 
        {{0, 1, 0, 1, 0}, 
                        {1, 0, 1, 1, 1}, 
                        {0, 1, 0, 0, 1}, 
                        {1, 1, 0, 0, 1}, 
                        {0, 1, 1, 1, 0}};
    
    int p[v] = {0};
    find_graph(graph, p, 0); 
    return 0;
}
