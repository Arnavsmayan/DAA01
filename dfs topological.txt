#include <iostream>
#include <stack>
using namespace std;
#define v 6

bool visited[v]={0};
stack<int> T;

void topological_sort(int cur_vert, int graph[v][v]) {
    visited[cur_vert] = true;
    for (int i = 0; i < v; ++i) {
        if (graph[cur_vert][i] && !visited[i]) {
            topological_sort(i, graph);
        }
    }
    T.push(cur_vert);
}

void sort(int graph[v][v]) {
    
    for (int i = 0; i < v; ++i) {
        if (!visited[i]) {
            topological_sort(i, graph);
        }
    }

    cout << "Topological Sort Order: ";
    while (!T.empty()) {
        cout << T.top() << " ";
        T.pop();
    }
    cout << endl;
}

int main() {
    int graph[v][v] = {
        //{A,B,C,D,E,F},
        {0, 1, 0, 1, 0, 0},
        {0, 0, 1, 0, 0, 0},
        {0, 0, 0, 1, 1, 0},
        {0, 0, 0, 0, 1, 0},
        {0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0},
    };
    sort(graph);

    return 0;
}
